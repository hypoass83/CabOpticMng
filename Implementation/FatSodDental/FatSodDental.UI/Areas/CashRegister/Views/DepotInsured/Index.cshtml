@using Ext.Net.MVC;
@using Ext.Net.Utilities;
@using Ext.Net;
@using FatSodDental.UI.Tools;
@using FatSod.Supply.Entities;
@using FatSod.Ressources;
@using FatSod.DataContext.Initializer;

@model System.Collections.IEnumerable
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var X = Html.X();
    var profile = (int)Session["UserProfile"];
    var user = (int)Session["UserID"];
    string activateValidatePurchase = @"if(App.DepositForm.isValid())
                                            {
                                                App.btnSave.setDisabled(false);
                                            }else{
                                                App.btnSave.setDisabled(true);
                                            }";

    string labelSeparator = " <span style = \"color : #ff0000; font-size: 1em;\"> * </span> :";
    //string labelPerc = " <span style = \"color : #ff0000; font-size: 1em;\"> % </span> :";
    //Les valeurs par défaut afin de réduire les clicques sur l'interface de commande
    int DefaultBranchID = (int)Session["DefaultBranchID"];
    int DefaultDeviseID = (int)Session["DefaultDeviseID"];
    int DefaultLocationID = (int)(Session["DefaultLocationID"] != null ? Session["DefaultLocationID"] : 0);
    var db = new FatSod.DataContext.Concrete.EFDbContext();
}

@section content
{

    @************************************************ Sales form informations ********************************@
    @(
 X.FormPanel()
            .ID("PostSupForm")
            .Frame(true)
            .MarginSpec("0 10 10 10")
            .BodyPadding(10)
        //.Title(Resources.FormUserAddTitle)
            .Items(
                X.DateField().FieldLabel("Proforma Date")
                .AllowBlank(false).Name("SoldDate")
                .ID("SoldDate")
                .Format("dd/MM/yyyy")
                .Value((DateTime)ViewBag.BusnessDayDate)
                .MarginSpec("10 0 10 0")
                .InputType(Ext.Net.InputType.DateTime)
                .DirectEvents(de =>
                {
                    de.Change.Action = "ReloadSalesListStore";
                    de.Change.Method = HttpMethod.POST;
                    de.Change.EventMask.ShowMask = true;
                    de.Change.EventMask.Msg = Resources.EventMaskUpdate;
                }),

                    X.FieldContainer().FieldLabel(Resources.SearchCriteria)
                        .Layout(LayoutType.HBox)
                        .LabelSeparator("  <span style = \"color : #ff0000; font-size: 1em;\"> * </span> :")
                        .ID("SearchCriteria")
                        .MsgTarget(MessageTarget.Side)
                            .Items(
                                X.ComboBox().Name("Seach Option")//.FieldLabel(Resources.UICollectifAccount)
                                .Items(new ListItem(Resources.Patient, "NAME"),
                                        new ListItem(Resources.ReceiptNumber, "NUMBER"))
                                .Value("NAME")
                                .ValueField("SearchOption")
                                .AllowBlank(false).ForceSelection(true)
                                .ID("SearchOption")
                                .Width(150)
                                .LabelSeparator("  <span style = \"color : #ff0000; font-size: 1em;\"> * </span> :")
                                .EmptyText("Choose Search Option")
                                .AutoSelect(false)
                                ,
                                X.Component().Width(5),
                                X.TextField().Width(250).ID("SearchValue").Name("SearchValue")
                                .BlankText("Type Search Value")
                                .AllowBlank(false)
                                .DirectEvents(de =>
                                {
                                    de.Change.Action = "loadGrid";
                                })
                            )

                )


    )
    @**********All customers pending sales********@
    @(
 X.Container()
    .Layout(LayoutType.HBox)
    .ID("pendingSalesOp")
    .MarginSpec("0 10 10 10")
    .Items(
        X.GridPanel()
            .Flex(1)
            .ID("SalePanelGrid")
            .Layout(LayoutType.Anchor)
            .Border(false)
            .Title(Resources.AllpendingSalesOperation)
            .DefaultAnchor("100%")
            .Store(
               X.Store()
                .GroupField("Pending sales")
                .ID("SalesListStore")
                .RemotePaging(true)
                .AutoLoad(true)
                .PageSize(2)
                .Model(
                    X.Model()
                        .IDProperty("CustomerOrderID")
                        .Fields(
                            new ModelField("CustomerOrderNumber", ModelFieldType.String),
                            new ModelField("CustomerFullName", ModelFieldType.String),
                            new ModelField("CustomerOrderDate", ModelFieldType.Date),
                            new ModelField("SaleTotalPrice", ModelFieldType.Float),
                            new ModelField("Remainder", ModelFieldType.Float)
                        )
                )
                .DataSource(Model)
                .ServerProxy(
                    X.AjaxProxy()
                    .Url(Url.Action("PendingCustomerSale", "DepotInsured"))
                    .ActionMethods(ac => ac.Read = HttpMethod.POST)
                    .Reader(X.JsonReader().RootProperty("data"))
                )

                .Parameters(ps =>
                    {
                        ps.Add(new StoreParameter("BranchID", "App.BranchID.getValue()", ParameterMode.Raw));
                        ps.Add(new StoreParameter("SoldDate", "App.SoldDate.getValue()", ParameterMode.Raw));
                        ps.Add(new StoreParameter("SearchOption", "App.SearchOption.getValue()", ParameterMode.Raw));
                        ps.Add(new StoreParameter("SearchValue", "App.SearchValue.getValue()", ParameterMode.Raw));
                    }

                )

            )
            .ColumnModel(
                X.RowNumbererColumn()
                ,
                X.Column()
                    .Text(Resources.SaleRef)
                    .DataIndex("CustomerOrderNumber")
                    .Flex(1)
                    ,
                X.Column()
                    .Text(Resources.Customer)
                    .DataIndex("CustomerFullName")
                    .Flex(1)
                    ,
                    X.DateColumn()
                    .Text(Resources.UIDateOperation)
                    .DataIndex("CustomerOrderDate")
                    .Flex(1),
                X.Column()
                    .Text(Resources.SaleAmount)
                    .DataIndex("SaleTotalPrice")
                    .Flex(1),
                X.Column()
                    .Text(Resources.Remainder)
                    .DataIndex("Remainder")
                    .Flex(1)
                    ,
                    X.ImageCommandColumn()
                    .Width(30)
                    .Hidden(LoadAction.IsSubMenuActionAble(MenuAction.UPDATE, profile, CodeValue.CashRegister.DepotInsured, db))
                    .Commands(
                    X.ImageCommand()
                            .CommandName("Edit")
                            .IconCls("icon-edit")
                    )
                    .DirectEvents(de =>
                    {
                        de.Command.Action = "InitializeFields";
                        //de.Command.Method = HttpMethod.POST;
                        de.Command.ExtraParams.Add(new Parameter("CustomerOrderID", "record.data.CustomerOrderID", ParameterMode.Raw));
                        de.Command.EventMask.ShowMask = true;
                        de.Command.EventMask.Msg = Resources.EventMaskUpdate;
                    })

                )
                        .Plugins(
                            X.FilterHeader()
                        )
                        .BottomBar(
                                X.PagingToolbar()
                        )
     )
    )
    @(
 X.FormPanel()
        //.Width(1000)
        // .Height(350)
        .ID("DepositForm")
        .Layout(LayoutType.Column)
        .MarginSpec("5 10 10 10")
            .Title(Resources.InfoDeposit)
            .Buttons(

                        X.Button()
                            .ID("btnSave")
                            .Text(Resources.ValidateButton)
                            .OnClientClick("App.Pdf.setHidden(true)")
                            .Disabled(true)
                            .Icon(Icon.Disk)
                            .DirectEvents(de =>
                            {
                                de.Click.Url = Url.Action("DoDepositInsured", "DepotInsured");
                                de.Click.EventMask.ShowMask = true;
                                de.Click.EventMask.Msg = Resources.EventMaskMsg;
                            })
                                ,
                            X.Button()
                            .ID("btnPrintFacture")
                            .Text(Resources.Printfacture)
                            .Icon(Icon.Printer)
                            .Disabled(true)
                            .OnClientClick("App.Pdf.setHidden(false)")
                            .DirectEvents(de =>
                            {
                                de.Click.Url = Url.Action("PrintFacture", "DepotInsured");
                                de.Click.EventMask.ShowMask = true;
                                de.Click.EventMask.Msg = Resources.EventMaskMsg;
                            }),
        
                        X.Button()
                            .ID("Cancel1")
                            .Text(Resources.Cancel)
                            .MarginSpec("0 20 10 10")
                            .OnClientClick("App.Pdf.setHidden(true)")
                            .DirectEvents(de =>
                            {
                                de.Click.Url = Url.Action("Reset");
                                de.Click.Complete = "";
                                de.Click.EventMask.ShowMask = true;
                                de.Click.EventMask.Msg = Resources.EventMaskMsg;
                            })
                    )
        .Listeners(ls =>
        {
            ls.FieldChange.Handler = activateValidatePurchase;
        })
        .Items(
            X.FormPanel()
                .ID("FormCustomerIdentification")
                .MarginSpec("0 0 0 0")
                .Title(Resources.CustomerIdentification)
                .Items(
        //Top Fields, sale information
                    X.Panel()
                     .MarginSpec("0 0 0 0")
                     .Title(" ")
                     .Layout(LayoutType.Column)
                     .LayoutConfig(new ColumnLayoutConfig { DefaultValueMode = DefaultValueMode.RenderExplicit })
                     .Items(
                     X.TextField().Name("CompteurFacture").ID("CompteurFacture").Hidden(true),
                     X.TextField().Name("CustomerOrderNumber").ID("CustomerOrderNumber").Hidden(true),
                     X.TextField().Name("NumeroFacture").ID("NumeroFacture").Hidden(true),
                     X.TextField().Name("BranchID").Hidden(true).ID("BranchID"),
                     X.Container()
                .Layout(LayoutType.VBox)
                .MarginSpec("10 10 0 10")
                .Items(//General Container 1
                    X.DateField().FieldLabel(Resources.DepositDate)
                        .AllowBlank(false)
                        .Name("CustomerOrderDate")
                        .ID("CustomerOrderDate")
                        .InputType(Ext.Net.InputType.DateTime)
                        .Value(ViewBag.BusnessDayDate)
                        .MarginSpec("2 0 10 0")
                        .Width(310)
                        .ReadOnly(true),
                    X.TextField()
                        .Name("CustomerName")
                        .FieldLabel(Resources.Customer)
                        .AllowBlank(false)
                        .MarginSpec("2 0 10 0")
                        .ReadOnly(true)
                        .ID("CustomerName")
                        .LabelSeparator(labelSeparator)
                        .EmptyText(Resources.Select)
                        .Width(310)
                        ,
                     X.TextField()
                        .Name("CompanyName")
                        .FieldLabel(Resources.Company)
                        .AllowBlank(false)
                        .MarginSpec("2 0 10 0")
                        .ReadOnly(true)
                        .ID("CompanyName")
                        .LabelSeparator(labelSeparator)
                        .EmptyText(Resources.Select)
                        .Width(310)
        ),
                    X.Container()
                .Layout(LayoutType.VBox)
                .MarginSpec("10 10 0 10")
                .Items(//General Container 1
                     X.TextField()
                        .Name("AssureurID")
                        .FieldLabel(Resources.Assureur)
                        .AllowBlank(false)
                        .MarginSpec("2 0 10 0")
                        .ID("AssureurID")
                        .LabelSeparator(labelSeparator)
                        .Width(310)
                     ,
                     X.TextField()
                        .Name("PoliceAssurance")
                        .FieldLabel(Resources.PoliceAssurance)
                        .AllowBlank(false)
                        .MarginSpec("2 0 10 0")
                        .ID("PoliceAssurance")
                        .LabelSeparator(labelSeparator)
                        .EmptyText(Resources.Select)
                        .Width(310)
                    ,
                     X.TextField()
                        .Name("NumeroBonPriseEnCharge")
                        .FieldLabel(Resources.NumeroBonPriseEnCharge)
                        .AllowBlank(false)
                        .MarginSpec("2 0 10 0")
                        .ID("NumeroBonPriseEnCharge")
                        .LabelSeparator(labelSeparator)
                        .EmptyText(Resources.Select)
                        .Width(310)
            ),
                X.Container()
                    .ID("SalePaiementContainer")
                    .Layout(LayoutType.VBox)
                    .MarginSpec("10 0 0 20")
                    .Items(//Sale Paiement Container

                        X.NumberField()
                            .FieldLabel(Resources.Debt)
                            .ID("Debt")
                            .Name("Debt")
                            .MarginSpec("0 0 1 0")
                            .AllowBlank(false)
                            .EnforceMaxLength(true)
                            .ReadOnly(true)
                            .Width(330)
                                //.Listeners(ls =>
                                //{
                                //    ls.Change.Handler = "App.RemainderDept.setValue(App.Debt.getValue())";
                                //})
                                ,

                            X.TextField().FieldLabel(Resources.Reference)
                            .Name("DepositReference")
                            .MsgTarget(MessageTarget.Side)
                            .ID("DepositReference")
                            .AllowBlank(false).MinLength(4).EnforceMaxLength(true)
                            .MarginSpec("0 0 1 0")
                            .ReadOnly(true)
                            .Width(330)
                        ,
                        X.ComboBox()
                            .ID("PaymentMethod")
                            .Name("PaymentMethod")
                            .FieldLabel(Resources.PaymentMethod)
                            .MarginSpec("0 0 1 0")
                            .AllowBlank(false)
                            .BlankText(Resources.PurchaseMode + " " + Resources.RequiredField)
                            .LabelSeparator(labelSeparator)
                            .EmptyText(Resources.Select)
                            .Value(CodeValue.Accounting.DefaultCodeAccountingSection.CODECAIS)
                            .DisplayField("Label")
                            .ValueField("Code")
                            .Items(LoadComponent.SalePaymentMethods)
                            .ForceSelection(true)
                            .Width(330)
                            .Listeners(ls =>
                                {
                                    ls.Enable.Handler = "if(this.getValue() == '" + CodeValue.Accounting.DefaultCodeAccountingSection.CODEBANK + "' ){App.PaymentMethodID.setDisabled(false);App.PaymentMethodID.allowBlank = false;}else{App.PaymentMethodID.setDisabled(true);App.PaymentMethodID.allowBlank = true;}";
                                    ls.Change.Handler = "if(this.getValue() == '" + CodeValue.Accounting.DefaultCodeAccountingSection.CODEBANK + "' ){App.PaymentMethodID.setDisabled(false);App.PaymentMethodID.allowBlank = false; App.PaymentMethodID.getStore().load();}else{App.PaymentMethodID.setDisabled(true);App.PaymentMethodID.allowBlank = true;}";
                                    ls.Disable.Handler = "App.PaymentMethodID.allowBlank = true; App.PaymentMethodID.setDisabled(true);App.PaymentMethodID.clearValue();";
                                    ls.Select.Handler = "if(this.getValue() == '" + CodeValue.Accounting.DefaultCodeAccountingSection.CODEBANK + "' ){App.PaymentMethodID.clearValue(); App.PaymentMethodID.getStore().load();}";
                                }
                            ),

                        X.ComboBox()
                            .Name("PaymentMethodID")
                            .ID("PaymentMethodID")
                            .FieldLabel(Resources.ChoixBank)
                            .EmptyText(Resources.Select)
                            .AutoSelect(false)
                            .LabelSeparator(labelSeparator)
                            .MarginSpec("0 0 1 0")
                            .AllowBlank(true)
                            .Disabled(true)
                            .BlankText(Resources.RequiredField)
                            .DisplayField("Name")
                            .ValueField("ID")
                            .Width(330)
                            .Store(
                                    X.Store()
                                    .AutoLoad(false)
                                    .Model(
                                        X.Model()
                                        .IDProperty("ID")
                                            .Fields(
                                                new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                                new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                            )
                                    )
                                    .Proxy(
                                        X.AjaxProxy()
                                            .Url(Url.Action("PaymentMethods"))
                                            .Reader(X.JsonReader().RootProperty("data"))
                                    )
                                    .Parameters(ps =>
                                        ps.Add(new StoreParameter("PaymentMethod", "App.PaymentMethod.getValue()", ParameterMode.Raw))
                                    )
                                ),

                            X.ComboBox()
                                .ID("DeviseID")
                                .Name("DeviseID")
                                .FieldLabel(Resources.UIDevise)
                                .AllowBlank(false)
                                .BlankText(Resources.UIDevise + " " + Resources.RequiredField)
                                .LabelSeparator(labelSeparator)
                                .EmptyText(Resources.Select)
                                .Items(LoadComponent.GetDevise)
                                .MarginSpec("0 0 1 0")
                                .Width(330)
                                .Value(1),
                            X.NumberField()
                            .FieldLabel(Resources.UIAmount)
                            .ID("Amount")
                            .Name("Amount")
                            .MarginSpec("0 0 1 0")
                            .AllowBlank(false)
                            .EnforceMaxLength(true)
                            .MinValue(0)
                            .Width(330)
                            .Listeners(ls =>
                            {
                                ls.Change.Handler = "App.RemainderDept.setValue(App.Debt.getValue() - this.getValue());";
                            })
                            ,

                             X.NumberField()
                                .FieldLabel("Remaining Debt")
                                .ID("RemainderDept")
                                .Name("RemainderDept")
                                .MarginSpec("0 0 1 0")
                                .AllowBlank(true)
                                .EnforceMaxLength(true)
                                .ReadOnly(true)
                                .Hidden(false)
                                .Width(330)
                                .MinValue(0)
                        )
                    )
                )    
                      
                         
    )//fin du formulaire

    )@*fin de l'élément razor*@


    @(
 X.Container()
        //Panel for print
            .Items(X.Panel()
                                .ID("Pdf")
                                .Title(Resources.panelprintvalreceip)
                                .Hidden(true)
                                .Layout(LayoutType.HBox)
                                .Flex(1)
                                .Collapsible(true)
                                .Padding(1)
                                .AutoScroll(false)
                                .Hidden(true)
                                .MinHeight(500)
                                .MinWidth(500)
                                .Loader(
                                   X.ComponentLoader()
                                    .AutoLoad(false)
                                    .Mode(LoadMode.Frame)
                                    .LoadMask(lm =>
                                        {
                                            lm.ShowMask = true;
                                            lm.Msg = Resources.MsgGenerateState;
                                            lm.UseMsg = true;

                                        })
                                    )
        )

    )
}