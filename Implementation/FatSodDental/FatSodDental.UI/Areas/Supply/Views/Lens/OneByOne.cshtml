@using Ext.Net.MVC;
@using Ext.Net.Utilities;
@using Ext.Net;
@using FatSodDental.UI.Tools;
@using FatSod.Supply.Entities;
@using FatSod.DataContext.Initializer;
@using FatSod.Ressources;

@model FatSodDental.UI.Areas.Supply.ViewModel.ProductModel

@{
    var profile = (int)Session["UserProfile"];
    var user = (int)Session["UserID"];

    ViewBag.Title = FatSod.Ressources.Resources.Product;
    Layout = "~/Views/Shared/_Layout.cshtml";
    var db = new FatSod.DataContext.Concrete.EFDbContext();
    var X = Html.X();
    var addAction = "AddProduct";
    if (Model.ProductID > 0)
    {
        addAction = "UpdateProduct";
    }

    string fieldChangeListener = @"
                                    var cylVal = App.LensNumberCylindricalValue.getValue();
                                    var sphVal = App.LensNumberSphericalValue.getValue();
                                    var addVal = App.LensNumberAdditionValue.getValue();
                                    var a = ( (cylVal != null && cylVal.length >= 4 ) || (sphVal != null && sphVal.length >= 4));

                                    if(App.LensForm.isValid() && a == true ){App.btnSave.setDisabled(false);}else{App.btnSave.setDisabled(true);}

 
                                  ";

}

@section header
{
    <style>
        /* Styling of global error indicator */
        .form-error-state {
            font-size: 11px;
            padding-left: 20px;
            height: 16px;
            line-height: 18px;
            background: no-repeat 0 0;
            cursor: default;
        }

        .form-error-state-invalid {
            color: #C30;
            background-image: url(../../../../icons/exclamation-png/ext.axd);
        }

        .form-error-state-valid {
            color: #090;
            background-image: url(../../../../icons/accept-png/ext.axd);
        }

        /* Error details tooltip */
        .errors-tip .error {
            font-style: italic;
        }
    </style>

    <script>
        /*
        var SetLensCode = function () {

            App.ProductCode.clearValue();

            if (App.BifocalCode.getValue() != null) {
                App.ProductCode.setValue( 'DF' );
            }

            if ( App.IsProgressive.getValue() != true ) {
                App.ProductCode.setValue( 'PROG' );
            }
            //le reste du monde
            App.ProductCode.setValue(App.ProductCode.getValue()      + ' '  +
                                     App.LensMaterialCode.getValue() + ' '  +
                                     App.LensColourCode.getValue()   + ' '  +
                                     App.LensCoatingCode.getValue()  + ' '  +
                                     App.LensNumberFullCode.getValue());

            if (App.BifocalCode.getValue() != null) {
                App.ProductCode.setValue( App.ProductCode.getValue() + ' ' + App.BifocalCode.getValue() );
            }

            if (App.LensOtherCriterion.getValue() != null) {
                App.ProductCode.setValue(App.ProductCode.getValue() + ' ' + App.LensOtherCriterion.getValue());
            }
            return res;
        };*/
    </script>
}




@section content
{

    @(

        //Début du FormPanel
            X.FormPanel()
        //paramétrages du formpanel
                .ID("LensForm")
                .Collapsible(true)
                .Title(FatSod.Ressources.Resources.ProductAddTitle)
                .Frame(true)
                .MarginSpec("0 0 10 0")
                .BodyPadding(10)
                .FieldDefaults(fd => { fd.LabelWidth = 120; fd.LabelStyle = "color:#0094ff;padding-left:4px;"; fd.LabelSeparator = "<span style = \"color : #ff0000; font-size: 1em;\"> * </span> : "; })
        //buttons enregistrer et Réinitialiser
                .Buttons(
        //buttons enregistrer
                    X.Button()
                        .ID("btnSave")
                        .Text(FatSod.Ressources.Resources.SaveButton)
                        .Disabled(true)
                        .Icon(Icon.Disk)
                        .Margin(10)
        //.DirectClickAction(addAction),
                            .DirectEvents(
                                de =>
                                {
                                    de.Click.Url = Url.Action("AddManager");
                                    de.Click.EventMask.ShowMask = true;
                                    de.Click.EventMask.Msg = FatSod.Ressources.Resources.EventMaskMsg;
                                }
                            ),
        //buttons Réinitialiser
                        X.Button()
                            .ID("btnReset")
                            .Text(FatSod.Ressources.Resources.ResetButton)
                            .Icon(Icon.ArrowRefresh)
                            .MarginSpec("0 20 10 10")
                            .DirectEvents(
                                    de =>
                                    {
                                        de.Click.Url = Url.Action("reset");
                                        de.Click.EventMask.ShowMask = true;
                                        de.Click.EventMask.Msg = FatSod.Ressources.Resources.EventMaskMsg;
                                    }
                            )
                    )
        //listeners du formpanel
                    .Listeners(
                        ls =>
                        {
                            ls.FieldChange.Handler = fieldChangeListener;
                            ls.AfterRender.Handler = fieldChangeListener;
                        }
                     )
        //les champs de saisie du formulaire
                     .Items(
                        X.Container()
                            .Layout(LayoutType.HBox)
                            .MarginSpec("0 0 10")
                            .Items(//container des fieldsets
                                X.TextField().Name("ProductID").ID("ProductID").Hidden(true),
                                     X.FieldSet()
                                            .ID("LensCriteriaFieldset")
                                            //.Flex(1)
                                            .Title("Lens Categorie")
                                            .Layout(LayoutType.Column)
                                            .Height(125)
                                            .Width(450)
                                            //.DefaultAnchor("100%")
                                            .Items(//Début de LensCriteriaFieldset

                                                X.ComboBox()
                                                    .ID("CategoryID")
                                                    .Name("CategoryID")
                                                    .FieldLabel(FatSod.Ressources.Resources.Categories)
                                                    .Items(/*Model.Categories*/LoadComponent.GetLensCategories())
                                                    .ValueField("CategoryID")
                                                    .AllowBlank(false)
                                                    .Width(400)
                                                    .ForceSelection(true)//cette propriété empeche à l'utilisateur de soumettre le formulaire avec un contenu différent de ce qui est dans la liste déroulante
                                                    .EmptyText(FatSod.Ressources.Resources.Choice)
                                                    ,
                                                    X.MultiCombo().Name("Stores")
                                                .MarginSpec("0 0 0 0")
                                                .FieldLabel("Stores")
                                                .AutoSelect(true)
        //.LabelSeparator(" <span style = \"color : #ff0000; font-size: 1em;\">  </span> :")
                                                .Items(LoadComponent.Localizations)
                                                .ForceSelection(true)
                                                .ID("Stores")
                                                .AllowBlank(true)
                                                .BlankText(Resources.Localization + " " + Resources.RequiredField)
                                                ),//Fin de LensCriteriaFieldset

                                X.Component().Width(10),//Espace entre les fieldsets

                                X.FieldSet()
                                    .ID("GeneralInformationFieldset")
                                    //.Flex(1)
                                    .Width(300)
                                    .Title("Lens Number")
                                    .Layout(LayoutType.Column)
                                    .Height(125)
                                    //.DefaultAnchor("100%")
                                    .Items(//Début de GeneralInformationFieldset
                                        
                                        X.TextField()
                                            .Name("LensNumberID")
                                            .ID("LensNumberID")
                                            .Hidden(true),

                                        //label
                                        X.TextField()
                                            .ID("LensNumberSphericalValue")
                                            .Name("LensNumberSphericalValue")
                                            .FieldLabel(FatSod.Ressources.Resources.SphericalValue)
                                            .MsgTarget(MessageTarget.Side)//le lieu d'affichage du message d'erreur lié à un défaut de validation
                                            .LabelSeparator("  <span style = \"color : #ff0000; font-size: 1em;\"> * </span> :") //séparateur entre le texte du label et la zone de saisie
                                            .BlankText(FatSod.Ressources.Resources.InputBlankTextMessage)//message qui sera afficher si le champ reste vide
                                            .AllowBlank(true),//dit si oui ou non le champ peut etre vide
                                        //code
                                        X.TextField()
                                            .ID("LensNumberCylindricalValue")
                                            .Name("LensNumberCylindricalValue")
                                            .FieldLabel(FatSod.Ressources.Resources.CylindricalValue)
                                            .MsgTarget(MessageTarget.Side)//le lieu d'affichage du message d'erreur lié à un défaut de validation
                                            .LabelSeparator("  <span style = \"color : #ff0000; font-size: 1em;\"> * </span> :")
                                            .BlankText(FatSod.Ressources.Resources.InputBlankTextMessage)//message qui sera afficher si le champ reste vide
                                            .AllowBlank(true)//dit si oui ou non le champ peut etre vide
                                            /*.MinLength(4)*/,
                                        
                                        X.TextField()
                                            .Name("LensNumberAdditionValue")
                                            .FieldLabel("Addition Value")
                                            //.InputValue("true")
                                            .ID("LensNumberAdditionValue")
                                        )@*début du box contenant code et libellé*@
    
                                         
        
                                        )//Fin de GeneralInformationFieldset

                            )//fin du

                        @*Fin du FormPanel*@
    )
    @*fin de la partie formulaire*@

    @*Début du tableau*@
    @(
    X.FieldSet()
                .Flex(1)
                .Layout(LayoutType.Anchor)
                .Border(false)
                .DefaultAnchor("100%")
                .Items(
                        X.FieldContainer().FieldLabel(Resources.SearchCriteria)
                    .Layout(LayoutType.HBox)
                    .LabelSeparator("  <span style = \"color : #ff0000; font-size: 1em;\"> * </span> :")
                    .ID("SearchCriteria")
                    .MsgTarget(MessageTarget.Side)
                        .Items(
                            X.ComboBox().Name("Seach Option")//.FieldLabel(Resources.UICollectifAccount)
                            .Items(new ListItem(Resources.Code, "CODE"),
                                    new ListItem(Resources.LensNumberFullCode, "LN"))
                            .Value("LN")
                            .ValueField("SearchOption")
                            .AllowBlank(false).ForceSelection(true)
                            .ID("SearchOption")
                            .Width(150)
                            .LabelSeparator("  <span style = \"color : #ff0000; font-size: 1em;\"> * </span> :")
                            .EmptyText("Choose Search Option")
                            .AutoSelect(false)
                            ,
                            X.Component().Width(5),
                            X.TextField().Width(300).ID("SearchValue").Name("SearchValue")
                            .BlankText("Type Search Value")
                            .AllowBlank(false)
                            .DirectEvents(de =>
                            {
                                de.Change.Action = "loadGrid";
                            })
                        ),
    Html.X().GridPanel()
        .Title(FatSod.Ressources.Resources.LensList)
        .ID("ProductList")
        .Layout(LayoutType.Fit)
        .Padding(10)
        .Frame(true)
        .Collapsible(true)
        .AutoScroll(true)
        .Store(
            Html.X().Store()
                .ID("Store")
                //.AutoLoad(true)
                .RemotePaging(true)
                .PageSize(10)
                //.Buffered(true)
                .GroupField("Light")
                .DataSource(Model.Products)
                .Model(Html.X().Model()
                    .Fields(
                        new ModelField() { Name = "ProductID", Type = ModelFieldType.Int },
                        new ModelField() { Name = "ProductCode", Type = ModelFieldType.String },
                        new ModelField() { Name = "ProductLabel", Type = ModelFieldType.String },
                        new ModelField() { Name = "CategoryLabel", Type = ModelFieldType.String },
                        new ModelField() { Name = "AccountLabel", Type = ModelFieldType.String },
                        new ModelField() { Name = "ProductDescription", Type = ModelFieldType.String },
                        new ModelField() { Name = "LensMaterialCode", Type = ModelFieldType.String },
                        new ModelField() { Name = "LensCoatingCode", Type = ModelFieldType.String },
                        new ModelField() { Name = "LensColourCode", Type = ModelFieldType.String },
                        new ModelField() { Name = "LensNumberFullCode", Type = ModelFieldType.String }
                    )
                )
            .ServerProxy(X.AjaxProxy()
                .Url(Url.Action("GetAllProducts"))
                .ActionMethods(ac => ac.Read = HttpMethod.POST)
                .Reader(X.JsonReader().RootProperty("data"))
            )
                    .Parameters(ps =>
                        {
                            ps.Add(new StoreParameter("SearchOption", "App.SearchOption.getValue()", ParameterMode.Raw));
                            ps.Add(new StoreParameter("SearchValue", "App.SearchValue.getValue()", ParameterMode.Raw));
                        }
                        )
                    )
        //.View(Html.X().GridView().TrackOver(false))
        .ColumnModel(
            Html.X().Column()
                    .Width(500)
                    .Text(FatSod.Ressources.Resources.Code)
                    .DataIndex("ProductCode")
                    .Flex(1)
                    ,

            Html.X().Column()
                .Text(FatSod.Ressources.Resources.Label)
                .DataIndex("ProductLabel")
                .Flex(1),
            Html.X().Column()
                    .Text(FatSod.Ressources.Resources.Category)
                    .DataIndex("CategoryLabel")
                    .Flex(1),
            Html.X().Column()
                .Text(FatSod.Ressources.Resources.AccountNumber)
                .DataIndex("AccountLabel")
                .Flex(1),
            Html.X().Column()
                .Text(FatSod.Ressources.Resources.Description)
                .DataIndex("ProductDescription")
                .Flex(1),

            //Html.X().Column()
            //    .Text(FatSod.Ressources.Resources.LensMaterialCode)
            //    .DataIndex("LensMaterialCode")
            //    .Flex(1),
            //Html.X().Column()
            //    .Text(FatSod.Ressources.Resources.LensCoatingCode)
            //    .DataIndex("LensCoatingCode")
            //    .Flex(1),
            //Html.X().Column()
            //    .Text(FatSod.Ressources.Resources.LensColourCode)
            //    .DataIndex("LensColourCode")
            //    .Flex(1),
            Html.X().Column()
                .Text(FatSod.Ressources.Resources.LensNumberFullCode)
                .DataIndex("LensNumberFullCode")
                .Flex(1),

            Html.X().ImageCommandColumn()
                .Width(30)
                .Hidden(LoadAction.IsSubMenuActionAble(MenuAction.DELETE, profile, CodeValue.Supply.LensProduct_SM.CODE,db))
                .Commands(
                    Html.X().ImageCommand()
                        .CommandName("Delete")
                        .IconCls("icon-delete")
                        .ToolTip(tt =>
                            {
                                tt.Text = FatSod.Ressources.Resources.ConfirmDeleteMessage;
                                tt.Title = "Supression";
                            }
                            )
                )
                .DirectEvents(de =>
                {
                    de.Command.Action = "DeleteProduct";
                    de.Command.Method = HttpMethod.POST;
                    de.Command.Confirmation.ConfirmRequest = true;
                    de.Command.Confirmation.Message = FatSod.Ressources.Resources.ConfirmDeleteMessage;
                    de.Command.Confirmation.Title = FatSod.Ressources.Resources.ConfirmDeleteTitle;
                    de.Command.ExtraParams.Add(new Parameter("ProductID", "record.data.ProductID", ParameterMode.Raw));
                    de.Command.EventMask.ShowMask = true;
                    de.Command.EventMask.Msg = FatSod.Ressources.Resources.EventMaskMsg;
                }),
            Html.X().ImageCommandColumn()
                .Width(30)
                .Hidden(LoadAction.IsSubMenuActionAble(MenuAction.UPDATE, profile, CodeValue.Supply.LensProduct_SM.CODE,db))
                .Commands(
                Html.X().ImageCommand()
                        .CommandName("Edit")
                        .IconCls("icon-edit")
                        .ToolTip(tt => tt.Text = "Modifier ?")
                )

                .DirectEvents(de =>
                {
                    de.Command.Action = "UpdateProduct";
                    de.Command.Method = HttpMethod.GET;
                    de.Command.ExtraParams.Add(new Parameter("ProductID", "record.data.ProductID", ParameterMode.Raw));
                    de.Command.EventMask.ShowMask = true;
                    de.Command.EventMask.Msg = FatSod.Ressources.Resources.EventMaskUpdate;
                })
            )
            .Plugins(
            X.FilterHeader()
            )
            .BottomBar(
            X.PagingToolbar()
            .Plugins(
                    X.ProgressBarPager()
            )
            .HideRefresh(true)
            )
        )
    )
    @*Fin du tableau*@
    @*  *@}