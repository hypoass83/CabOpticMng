@using Ext.Net.MVC;
@using Ext.Net.Utilities;
@using Ext.Net;
@using FatSodDental.UI.Tools;
@using FatSod.Security.Entities;
@using FatSod.Ressources;
@using FatSod.DataContext.Initializer;
@model System.Collections.IEnumerable
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var X = Html.X();
    var profile = (int)Session["UserProfile"];
    var user = (int)Session["UserID"];
    string labelSeparator = "  <span style = \"color : #ff0000; font-size: 1em;\"> * </span> :";
}
@section content
{
    @***********************************************************@
    @(
 X.Container()
    .Layout(LayoutType.HBox)
    .MarginSpec("-10 0 0 0")
    .ID("DefaultContainer")
    .Layout(LayoutType.Fit)
    .Items(

    X.FieldSet()
    .Flex(1)
    .ID("DefaultFieldSet")
    .Layout(LayoutType.Fit)
    .Border(false)
    .DefaultAnchor("100%")
        .Items(
        X.FormPanel()
        .ID("RptBalanceGenerale")
        .Items(
        X.PanelTitle()
        .ID("PanelTitle")
        .Border(true)
        .Padding(2)
        .Content(
        @<header>
            <h4>@Resources.UIBalanceClientelle</h4>
            <h6>@Resources.RequireField <code>(*)</code></h6>
        </header>
                                            )
                                        )
                                        .Frame(true)
                                        .MarginSpec("0 0 0 0")
                                        .Width(350)
                                        .Padding(0)
                                        .FieldDefaults(fd => { fd.LabelWidth = 120; fd.LabelStyle = "color:#0094ff;padding-left:4px;"; })
                                        .Items(
                                        X.FormPanel()
                                        .Layout(LayoutType.Column)
                                        .ID("FormrptIdentification")
                                        .MarginSpec("0 0 0 0")
                                        .Items(
                                        X.FieldSet()
                                        .Layout(LayoutType.Column)
                                        .MarginSpec("0 0 0 0")
                                        .Title(Resources.GeneralInfoIdentification)
                                        .AnchorHorizontal("100")
                                            .Items(
                                            X.TextField().Name("RptBalanceGeneraleID").ID("RptBalanceGeneraleID").Hidden(true),
                                            X.ComboBox().Name("BranchID")
                                            .FieldLabel(Resources.UserBranch)
                                            .EmptyText(Resources.Select).ForceSelection(true)
                                            .LabelSeparator(labelSeparator)
                                            .Items(LoadComponent.Branchs(user))
                                            .ID("BranchID")
                                            .AllowBlank(false)
                                            .MarginSpec("0 0 10 0")
                                            .BlankText(Resources.UserBranch + " " + Resources.RequiredField)
                                            ,
                                            X.ComboBox().Name("DeviseID")
                                            .FieldLabel(Resources.UIDevise)
                                            .EmptyText(Resources.Select).ForceSelection(true)
                                            .LabelSeparator(labelSeparator)
                                            .Items(LoadComponent.GetDevise)
                                            .ID("DeviseID")
                                            .AllowBlank(false)
                                            .MarginSpec("0 0 10 0")
                                            .BlankText(Resources.UIDevise + " " + Resources.RequiredField)
                                            ),
                                            X.Component().Width(10),
                                        X.FieldSet()
                                        .Layout(LayoutType.Column)
                                        .MarginSpec("0 0 0 0")
                                        .Title(Resources.UIDateInfo)
                                        .AnchorHorizontal("100")
                                            .Items(
                                            X.DateField().FieldLabel(Resources.UIBeginDate)
                                            .AllowBlank(false)
                                            .Name("BeginDate")
                                            .ID("BeginDate")
                                            .MarginSpec("0 0 10 0")
                                            .LabelSeparator(labelSeparator)
                                            .InputType(Ext.Net.InputType.DateTime)
                                            ,
                                            X.DateField().FieldLabel(Resources.UIEndDate)
                                            .AllowBlank(false)
                                            .Name("EndDate")
                                            .ID("EndDate")
                                            .MarginSpec("0 0 10 0")
                                            .LabelSeparator(labelSeparator)
                                            .InputType(Ext.Net.InputType.DateTime)
                                            
                                            )

                                            )
                                        .Buttons(

                                                X.Button()
                                                .Text(Resources.UIDisplayEntries)
                                                .ID("IDDisplayEntries")
                                                .OnClientClick("App.PanelReport.setHidden(true)")
                                                .DirectEvents(de =>
                                                {
                                                    de.Click.Url = Url.Action("DisplayEntries", "RptBalanceGenerale");
                                                    de.Click.EventMask.ShowMask = true;
                                                    de.Click.EventMask.Msg = Resources.EventMaskMsg;
                                                }),
                                                X.Button()
                                                    .Text(Resources.UIPrint)
                                                    .ID("IDShowGeneric")
                                                    .Icon(Icon.Printer)
                                                    .OnClientClick("App.PanelReport.setHidden(false)")
                                                    .DirectEvents(de =>
                                                    {
                                                        de.Click.Url = Url.Action("PrintReport", "RptBalanceGenerale");
                                                        de.Click.EventMask.ShowMask = true;
                                                        de.Click.EventMask.Msg = Resources.EventMaskMsg;
                                                    }),
                                                X.Button()
                                                    .Text(Resources.ResetButton)
                                                    .OnClientClick("this.up('form').reset();")
                                                    .Icon(Icon.ArrowRefresh)
                                            )
                                            ,

                                            X.Component().Width(10),
                                            X.FieldSet()
                                            .Flex(1)
                                            .Layout(LayoutType.Fit)
                                            .Border(false)
                                            .Padding(0)
                                            .DefaultAnchor("100%")
                                            .Items(
                                                    X.GridPanel()
                                                    .Title(Resources.UIVoucherList)
                                                    .ID("GridPanelAcctOp")
                                                    .Layout(LayoutType.Fit)
                                                    .MarginSpec("0 0 0 0")
                                                    .Frame(true)
                                                    .Collapsible(true)
                                                    .Store(
                                                        X.Store()
                                                        .ID("Store")
                                                        .RemotePaging(true)
                                                        .AutoLoad(true)
                                                        .PageSize(10)
                                                        .DataSource(Model)
                                                        .Model(
                                                            X.Model()
                                                            .Fields(
                                                                //new ModelField() { Name = "RptBalanceGeneraleID", Type = ModelFieldType.Float },

                                                                new ModelField() { Name = "Agence", Type = ModelFieldType.Int },
                                                                new ModelField() { Name = "LibAgence", Type = ModelFieldType.String },
                                                                new ModelField() { Name = "Devise", Type = ModelFieldType.Int },
                                                                new ModelField() { Name = "LibDevise", Type = ModelFieldType.String },
                                                                new ModelField() { Name = "Compte", Type = ModelFieldType.String },
                                                                new ModelField() { Name = "Libelle", Type = ModelFieldType.String },
                                                                new ModelField() { Name = "SoldeInitDb", Type = ModelFieldType.Float },
                                                                new ModelField() { Name = "SoldeInitCr", Type = ModelFieldType.Float },
                                                                new ModelField() { Name = "DebitMvt", Type = ModelFieldType.Float },
                                                                new ModelField() { Name = "CreditMvt", Type = ModelFieldType.Float },
                                                                new ModelField() { Name = "SoldeFinDb", Type = ModelFieldType.Float },
                                                                new ModelField() { Name = "SoldeFinCr", Type = ModelFieldType.Float }
                                                            )
                                                        )
//=======
//                                                        ).DataSource(Model)
//>>>>>>> yes
                                                        .ServerProxy(
                                                        X.AjaxProxy()
                                                        .Url(Url.Action("GetList"))
                                                        .ActionMethods(ac => ac.Read = HttpMethod.POST)
                                                        .Reader(X.JsonReader().RootProperty("data"))
                                                        )
                                                        .Parameters(ps =>
                                                                {
                                                                    ps.Add(new StoreParameter("BranchID", "App.BranchID.getValue()", ParameterMode.Raw));
                                                                    ps.Add(new StoreParameter("DeviseID", "App.DeviseID.getValue()", ParameterMode.Raw));
                                                                }
                                                            )
                                                    )
                                                    .ColumnModel(
                                                    Html.X().Column()
                                                    .Text(Resources.UserBranch)
                                                    .DataIndex("LibAgence")
                                                    .Flex(1),
                                                    Html.X().Column()
                                                    .Text(Resources.UIDevise)
                                                    .DataIndex("LibDevise")
                                                    .Flex(1),
                                                    Html.X().Column()
                                                    .Text(Resources.UIAccount)
                                                    .DataIndex("Compte")
                                                    .Flex(1),                                                    
                                                    Html.X().Column()
                                                    .Text(Resources.UISoldeInitDb)
                                                    .DataIndex("SoldeInitDb")
                                                    .Flex(1),
                                                    Html.X().Column()
                                                    .Text(Resources.UISoldeInitCr)
                                                    .DataIndex("SoldeInitCr")
                                                    .Flex(1),
                                                    Html.X().Column()
                                                    .Text(Resources.UIDebitMvt)
                                                    .DataIndex("DebitMvt")
                                                    .Flex(1),
                                                    Html.X().Column()
                                                    .Text(Resources.UICreditMvt)
                                                    .DataIndex("CreditMvt")
                                                    .Flex(1),
                                                    Html.X().Column()
                                                    .Text(Resources.UISoldeFinDb)
                                                    .DataIndex("SoldeFinDb")
                                                    .Flex(1),
                                                    Html.X().Column()
                                                    .Text(Resources.UISoldeFinCr)
                                                    .DataIndex("SoldeFinCr")
                                                    .Flex(1)
                                                    )
                                                    .Plugins(
                                                    X.FilterHeader()
                                                    )
                                                    .BottomBar(
                    X.PagingToolbar()
            )
                                                )
                                            )
                                        )//ici
                                        )
    )

@(
 X.Container()
        //Panel for print
    .Items(X.Panel()
        .ID("PanelReport")
        .MarginSpec("-10 0 -100 0")
        .Title(Resources.PanelPreview)
        .Hidden(true)
        .Layout(LayoutType.HBox)
        .Flex(1)
        .Collapsible(true)
        .Padding(1)
        .AutoScroll(false)
        .Hidden(true)
        .MinHeight(800)
        //.MinWidth(500)
        .Loader(
            X.ComponentLoader()
            .AutoLoad(false)
            .Mode(LoadMode.Frame)
            .LoadMask(lm =>
                {
                    lm.ShowMask = true;
                    lm.Msg = Resources.MsgGenerateState;
                    lm.UseMsg = true;

                })
            )
        )

)

}
