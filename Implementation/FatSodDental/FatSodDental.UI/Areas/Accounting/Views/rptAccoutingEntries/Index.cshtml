@using Ext.Net.MVC;
@using Ext.Net.Utilities;
@using Ext.Net;
@using FatSodDental.UI.Tools;
@using FatSod.Security.Entities;
@using FatSod.Ressources;
@using FatSod.DataContext.Initializer;

@model System.Collections.IEnumerable
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
	var X = Html.X();
	var profile = (int)Session["UserProfile"];
	var user = (int)Session["UserID"];
	string labelSeparator = "  <span style = \"color : #ff0000; font-size: 1em;\"> * </span> :";
}
@section content
{
	@***********************************************************@
	@(
 X.Container()
	.Layout(LayoutType.HBox)
	.MarginSpec("-10 0 0 0")
	.ID("DefaultContainer")
	.Layout(LayoutType.Fit)
	.Items(

	X.FieldSet()
	.Flex(1)
	.ID("DefaultFieldSet")
	.Layout(LayoutType.Fit)
	.Border(false)
	.DefaultAnchor("100%")
		.Items(
		X.FormPanel()
		.ID("rptAccoutingEntries")
		.Items(
		X.PanelTitle()
		.ID("PanelTitle")
		.Border(true)
		.Padding(2)
		.Content(
		@<header>
			<h4>@Resources.UIAccountOperationTitle</h4>
			<h6>@Resources.RequireField <code>(*)</code></h6>
		</header>
	        )
        )
        .Frame(true)
        .MarginSpec("0 0 0 0")
        .Width(350)
        .Padding(0)
        .FieldDefaults(fd => { fd.LabelWidth = 120; fd.LabelStyle = "color:#0094ff;padding-left:4px;"; })
        .Items(
        X.FormPanel()
        .Layout(LayoutType.Column)
        .ID("FormrptIdentification")
        .MarginSpec("0 0 0 0")
        .Items(
        X.FieldSet()
        .Layout(LayoutType.Column)
        .MarginSpec("0 0 0 0")
        .Title(Resources.GeneralInfoIdentification)
        .AnchorHorizontal("100")
	        .Items(
	        X.TextField().Name("AccountOperationID").ID("AccountOperationID").Hidden(true),
	        X.ComboBox().Name("BranchID")
	        .FieldLabel(Resources.UserBranch)
	        .EmptyText(Resources.Select).ForceSelection(true)
	        .LabelSeparator(labelSeparator)
	        .Items(LoadComponent.Branchs(user))
	        .ID("BranchID")
	        .AllowBlank(false)
	        .MarginSpec("0 0 10 0")
	        .BlankText(Resources.UserBranch + " " + Resources.RequiredField)
	        ,
	        X.ComboBox().Name("DeviseID")
	        .FieldLabel(Resources.UIDevise)
	        .EmptyText(Resources.Select).ForceSelection(true)
	        .LabelSeparator(labelSeparator)
	        .Items(LoadComponent.GetDevise)
	        .ID("DeviseID")
	        .AllowBlank(false)
	        .MarginSpec("0 0 10 0")
	        .BlankText(Resources.UIDevise + " " + Resources.RequiredField)
	        ,
	        X.ComboBox().Name("OperationID") //ici c'est le type operation ki est selectionne dc bv faire attention ds le controleur
	        .FieldLabel(Resources.UIOperationCode)
	        .EmptyText(Resources.Select)
	        .LabelSeparator(labelSeparator)
	        .Items(LoadComponent.OperationType)
	        .ID("OperationID")
	        .AllowBlank(false).ForceSelection(true)
	        .MarginSpec("0 0 10 0")
	        .Width(350)
	        .BlankText(Resources.UIOperationCode + " " + Resources.RequiredField)
	        ),
                            X.Component().Width(10),
                        X.FieldSet()
                        .Layout(LayoutType.Column)
                        .MarginSpec("0 0 0 0")
                        .Title(Resources.UIDateInfo)
                        .AnchorHorizontal("100")
                            .Items(
                            X.DateField().FieldLabel(Resources.UIBeginDate)
                            .AllowBlank(false)
                            .Name("BeginDate")
                            .ID("BeginDate")
                            .MarginSpec("0 0 10 0")
                            .LabelSeparator(labelSeparator)
                            .InputType(Ext.Net.InputType.DateTime)
                            ,
                            X.DateField().FieldLabel(Resources.UIEndDate)
                            .AllowBlank(false)
                            .Name("EndDate")
                            .ID("EndDate")
                            .MarginSpec("0 0 10 0")
                            .LabelSeparator(labelSeparator)
                            .InputType(Ext.Net.InputType.DateTime)
	        ,
	        X.TextField().FieldLabel("Total Debit").MarginSpec("0 10 10 0").ReadOnly(true).ID("TotalDebit").Hidden(false).Width(200)//.Value(ViewBag.TotalDebit)
	        ,
	        X.TextField().FieldLabel("Total Credit").MarginSpec("0 10 10 0").ReadOnly(true).ID("TotalCredit").Hidden(false).Width(200)//.Value(ViewBag.TotalCredit)
	        ,
	        X.TextField().FieldLabel("Solde").MarginSpec("0 10 10 0").ReadOnly(true).ID("Solde").Hidden(false)//.Value(ViewBag.Solde)
	        .Width(200)
	        )

	        )
        .Buttons(

				X.Button()
				.Text(Resources.UIDisplayEntries)
				.ID("IDDisplayEntries")
                .OnClientClick("App.PanelReport.setHidden(true)")
				.DirectEvents(de =>
				{
					de.Click.Url = Url.Action("DisplayEntries", "rptAccoutingEntries");
					de.Click.EventMask.ShowMask = true;
					de.Click.EventMask.Msg = Resources.EventMaskMsg;
				}),
				X.Button()
                    .Text(Resources.UIPrint)
					.ID("IDShowGeneric")
                     .Icon(Icon.Printer)
                    .OnClientClick("App.PanelReport.setHidden(false)")
                    .DirectEvents(de =>
                    {
                        de.Click.Url = Url.Action("PrintReport", "rptAccoutingEntries");
                        de.Click.EventMask.ShowMask = true;
                        de.Click.EventMask.Msg = Resources.EventMaskMsg;
                    }),
					
				X.Button()
				    .Text(Resources.ResetButton)
				    .OnClientClick("this.up('form').reset();")
				    .Icon(Icon.ArrowRefresh)
			)
	        ,

	        X.Component().Width(10),
	        X.FieldSet()
	        .Flex(1)
	        .Layout(LayoutType.Fit)
	        .Border(false)
	        .Padding(0)
	        .DefaultAnchor("100%")
	        .Items(
			        X.GridPanel()
			        .Title(Resources.UIVoucherList)
			        .ID("GridPanelAcctOp")
			        .Layout(LayoutType.Fit)
			        .MarginSpec("0 0 0 0")
			        .Frame(true)
			        .Collapsible(true)
			        .Store(
			        X.Store()
			        .PageSize(10)
			        .AutoLoad(true)
			        .ID("Store")
				        .Model(
				        X.Model()
				        .Fields(
								new ModelField() { Name = "AccountOperationID", Type = ModelFieldType.Float },
								new ModelField() { Name = "UIBranchCode", Type = ModelFieldType.String },
								new ModelField() { Name = "UIDeviseCode", Type = ModelFieldType.String },
								new ModelField() { Name = "UIOperationCode", Type = ModelFieldType.String },
								new ModelField() { Name = "UIAccountNumber", Type = ModelFieldType.String },
								new ModelField() { Name = "DateOperation", Type = ModelFieldType.Date },
								new ModelField() { Name = "Description", Type = ModelFieldType.String },
								new ModelField() { Name = "Reference", Type = ModelFieldType.String },
								new ModelField() { Name = "CodeTransaction", Type = ModelFieldType.String },
								new ModelField() { Name = "Debit", Type = ModelFieldType.Float },
								new ModelField() { Name = "Credit", Type = ModelFieldType.Float }
					        )
				        )
                        .Sorters(
                            X.DataSorter()
                            .Property("Reference")
                            .Direction(Ext.Net.SortDirection.ASC)
                        )
                        .DataSource(Model)
				        .ServerProxy(
				        X.AjaxProxy()
				        .Url(Url.Action("GetList"))
				        .ActionMethods(ac => ac.Read = HttpMethod.POST)
				        .Reader(X.JsonReader().RootProperty("data"))
				        )
			        )
			        .ColumnModel(
			        Html.X().Column()
			        .Text(Resources.UserBranch)
			        .DataIndex("UIBranchCode")
			        .Flex(1),
			        Html.X().Column()
			        .Text(Resources.UIDevise)
			        .DataIndex("UIDeviseCode")
			        .Flex(1)
			        ,
			        Html.X().Column()
			        .Text(Resources.UIOperation)
			        .DataIndex("UIOperationCode")
			        .Flex(1),
                    Html.X().DateColumn()
			        .Text(Resources.UIDateOperation)
			        .DataIndex("DateOperation")
			        .Flex(1).Format("dd/MM/yyyy"),
			        Html.X().Column()
			        .Text("Reference")
			        .DataIndex("Reference")
			        .Flex(1),
			        Html.X().Column()
			        .Text("Description")
			        .DataIndex("Description")
			        .Flex(1),
			        Html.X().Column()
			        .Text("CodeTransaction")
			        .DataIndex("CodeTransaction")
			        .Flex(1)
			        ,
			        Html.X().Column()
			        .Text(Resources.UIAccount)
			        .DataIndex("UIAccountNumber")
			        .Flex(1),
			        Html.X().Column()
			        .Text(Resources.UIdebit)
			        .DataIndex("Debit")
			        .Flex(1),
			        Html.X().Column()
			        .Text(Resources.UIcredit)
			        .DataIndex("Credit")
			        .Flex(1)

			        )
			        .BottomBar(
                    X.PagingToolbar()
            )
		        )
	        )
        )//ici
        )
	)
@(
 X.Container()
        //Panel for print
    .Items(X.Panel()
        .ID("PanelReport")
        .MarginSpec("0 0 -100 0")
        .Title(Resources.PanelPreview)
        .Hidden(true)
        .Layout(LayoutType.HBox)
        .Flex(1)
        .Collapsible(true)
        .Padding(1)
        .AutoScroll(false)
        .Hidden(true)
        .MinHeight(500)
        .MinWidth(500)
        .Loader(
            X.ComponentLoader()
            .AutoLoad(false)
            .Mode(LoadMode.Frame)
            .LoadMask(lm =>
                {
                    lm.ShowMask = true;
                    lm.Msg = Resources.MsgGenerateState;
                    lm.UseMsg = true;

                })
            )
        )

)

}